<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="akka" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka" />
  </configSections>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
  </startup>
  <akka>
    <hocon>
      <![CDATA[
akka {
    actor {              
        provider = "Akka.Cluster.ClusterActorRefProvider, Akka.Cluster"
        deployment {
            /subscriber {
                router = smallest-mailbox-pool
                nr-of-instances = 24
            }
        }                          
        debug {  
            receive = on
            autoreceive = on
            lifecycle = on
            event-stream = on
            unhandled = on
        }
        serializers {
            json = "Akka.Serialization.NewtonSoftJsonSerializer"
            bytes = "Akka.Serialization.ByteArraySerializer"
            hyperion = "Akka.Serialization.HyperionSerializer, Akka.Serialization.Hyperion"
        }
        serialization-bindings {
            "System.Byte[]" = bytes
            "System.Object" = hyperion
        }
    }
    cluster {
        periodic-tasks-initial-delay = 1s
        gossip-interval = 1s
        gossip-time-to-live = 2s
        leader-actions-interval = 1s
        unreachable-nodes-reaper-interval = 1s
        publish-stats-interval = off
        use-dispatcher = ""
        gossip-different-view-probability = 0.8
        reduce-gossip-different-view-probability = 400
    
        failure-detector {
          implementation-class = "Akka.Remote.PhiAccrualFailureDetector"
          heartbeat-interval = 1 s
          threshold = 8.0
          max-sample-size = 1000
          min-std-deviation = 100 ms
          acceptable-heartbeat-pause = 3 s
          monitored-by-nr-of-members = 5
          expected-response-after = 5 s
        }    
        
        

        
        #will inject this node as a self-seed node at run-time
        seed-nodes = ["akka.tcp://AkkaSingleton@127.0.0.1:33400"]
        roles = ["singletons"]
    }
    
    akka.cluster.singleton {
      # The actor name of the child singleton actor.
      singleton-name = "singleton"

      # Singleton among the nodes tagged with specified role.
      # If the role is not specified it's a singleton among all nodes in the cluster.
      role = "singletons"

      # When a node is becoming oldest it sends hand-over request to previous oldest, 
      # that might be leaving the cluster. This is retried with this interval until 
      # the previous oldest confirms that the hand over has started or the previous 
      # oldest member is removed from the cluster (+ akka.cluster.down-removal-margin).
      hand-over-retry-interval = 1s

      # The number of retries are derived from hand-over-retry-interval and
      # akka.cluster.down-removal-margin (or ClusterSingletonManagerSettings.RemovalMargin),
      # but it will never be less than this property.
      min-number-of-hand-over-retries = 10
    }
    
    remote {
        log-remote-lifecycle-events = on
        log-received-messages = on

        helios.tcp {
            transport-class = "Akka.Remote.Transport.Helios.HeliosTcpTransport, Akka.Remote"
            applied-adapters = []
            transport-protocol = tcp
            #will be populated with a dynamic host-name at runtime if left uncommented
            #public-hostname = "POPULATE STATIC IP HERE"
            hostname = "127.0.0.1"
            port = 33402
            maximum-frame-size = 12800000b
        }
    }  
    loggers = []
    stdout-loglevel = DEBUG
    loglevel = DEBUG
    log-config-on-start = on
    coordinated-shutdown.phases {

      # The first pre-defined phase that applications can add tasks to.
      # Note that more phases can be be added in the application's
      # configuration by overriding this phase with an additional 
      # depends-on.
      before-service-unbind {
      }

      # Stop accepting new incoming requests in for example HTTP.
      service-unbind {
          depends-on = [before-service-unbind]
      }

      # Wait for requests that are in progress to be completed.
      service-requests-done {
          depends-on = [service-unbind]
      }

      # Final shutdown of service endpoints.
      service-stop {
          depends-on = [service-requests-done]
      }

      # Phase for custom application tasks that are to be run
      # after service shutdown and before cluster shutdown.
      before-cluster-shutdown {
          depends-on = [service-stop]
      }

      # Graceful shutdown of the Cluster Sharding regions.
      cluster-sharding-shutdown-region {
          timeout = 10 s
          depends-on = [before-cluster-shutdown]
      }

      # Emit the leave command for the node that is shutting down.
      cluster-leave {
          depends-on = [cluster-sharding-shutdown-region]
      }

      # Shutdown cluster singletons
      cluster-exiting {
          timeout = 10 s
          depends-on = [cluster-leave]
      }

      # Wait until exiting has been completed
      cluster-exiting-done {
          depends-on = [cluster-exiting]
      }

      # Shutdown the cluster extension
      cluster-shutdown {
          depends-on = [cluster-exiting-done]
      }

      # Phase for custom application tasks that are to be run
      # after cluster shutdown and before ActorSystem termination.
      before-actor-system-terminate {
          depends-on = [cluster-shutdown]
      }

      # Last phase. See terminate-actor-system and exit-jvm above.
      # Don't add phases that depends on this phase because the 
      # dispatcher and scheduler of the ActorSystem have been shutdown. 
      actor-system-terminate {
          timeout = 10 s
          depends-on = [before-actor-system-terminate]
      }
  }
}
        ]]>
    </hocon>
  </akka>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.1.0" newVersion="4.1.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime.Extensions" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.1.0" newVersion="4.1.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Diagnostics.Tracing" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.1.0" newVersion="4.1.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Reflection" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.1.0" newVersion="4.1.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime.InteropServices" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>